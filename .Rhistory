plot(donut2$data, col=donut2$class, pch=19, main="k=2")
plot(donut3$data, col=donut3$class, pch=19, main="k=3")
plot(donut4$data, col=donut4$class, pch=19, main="k=4")
par(opar)
## generate data
donut2 = genDonuts(k=2)
donut3 = genDonuts(k=3)
donut4 = genDonuts(k=4)
## visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
plot(donut2$data, col=donut2$class, pch=19, main="k=2")
plot(donut3$data, col=donut3$class, pch=19, main="k=3")
plot(donut4$data, col=donut4$class, pch=19, main="k=4")
par(opar)
library(T4cluster)
pkgdown::build_site()
library(T4cluster)
library(T4cluster)
install.packages(c("Rdimtools","ADMM","fda","maotai","mclustcomp","rstiefel","scatterplot3d"))
library(T4cluster)
library(T4cluster)
library(T4cluster)
library(T4cluster)
library(T4cluster)
help(kmeans)
data(iris)
X   = as.matrix(iris[,1:4])
lab = as.integer(as.factor(iris[,5]))
## EMBEDDING WITH PCA
X2d = Rdimtools::do.pca(X, ndim=2)$Y
## CLUSTERING WITH DIFFERENT K VALUES
vec_k  = 2:10
vec_CH = rep(0, length(vec_k))
for (i in 1:length(vec_CH)){
cl_now = kmeans(X, k=vec_k[i])$cluster
vec_CH[i] = quality.CH(X, cl_now)
}
vec_CH
library(T4cluster)
data(iris)
X   = as.matrix(iris[,1:4])
lab = as.integer(as.factor(iris[,5]))
## EMBEDDING WITH PCA
X2d = Rdimtools::do.pca(X, ndim=2)$Y
## CLUSTERING WITH DIFFERENT K VALUES
vec_k  = 2:10
vec_CH = rep(0, length(vec_k))
for (i in 1:length(vec_CH)){
cl_now = kmeans(X, k=vec_k[i])$cluster
vec_CH[i] = quality.CH(X, cl_now)
}
vec_CH
plot(vec_k, vec_CH, "b")
data(iris)
X   = rbind(matrix(rnorm(10*3), ncol=3),
matrix(rnorm(10*3, mean=-2), ncol=3),
matrix(rnorm(10*3, mean=2), ncol=3))
## CLUSTERING WITH DIFFERENT K VALUES
vec_k  = 2:10
vec_CH = rep(0, length(vec_k))
for (i in 1:length(vec_CH)){
cl_now = kmeans(X, k=vec_k[i])$cluster
vec_CH[i] = quality.CH(X, cl_now)
}
plot(vec_k, vec_CH, "b")
plot(vec_k, vec_CH, "b")
X   = rbind(matrix(rnorm(10*3), ncol=3),
matrix(rnorm(10*3, mean=-5), ncol=3),
matrix(rnorm(10*3, mean=5), ncol=3))
X
plot9X
plot(X)
vec_k  = 2:10
vec_CH = rep(0, length(vec_k))
for (i in 1:length(vec_CH)){
cl_now = kmeans(X, k=vec_k[i])$cluster
vec_CH[i] = quality.CH(X, cl_now)
}
plot(vec_k, vec_CH, "b")
library(T4cluster)
data(iris)
X   = rbind(matrix(rnorm(10*3), ncol=3),
matrix(rnorm(10*3, mean=-5), ncol=3),
matrix(rnorm(10*3, mean=5), ncol=3))
## CLUSTERING WITH DIFFERENT K VALUES
vec_k  = 2:10
vec_CH = rep(0, length(vec_k))
for (i in 1:length(vec_CH)){
cl_now = kmeans(X, k=vec_k[i])$cluster
vec_CH[i] = quality.CH(X, cl_now)
}
plot(vec_k, vec_CH, "b")
data(iris)
X   = rbind(matrix(rnorm(10*3), ncol=3),
matrix(rnorm(10*3, mean=-5), ncol=3),
matrix(rnorm(10*3, mean=5), ncol=3))
## CLUSTERING WITH DIFFERENT K VALUES
vec_k  = 2:10
vec_CH = rep(0, length(vec_k))
for (i in 1:length(vec_CH)){
cl_now = kmeans(X, k=vec_k[i])$cluster
vec_CH[i] = quality.CH(X, cl_now)
}
plot(vec_k, vec_CH, "b")
data(iris)
X   = rbind(matrix(rnorm(10*3), ncol=3),
matrix(rnorm(10*3, mean=-5), ncol=3),
matrix(rnorm(10*3, mean=5), ncol=3))
## CLUSTERING WITH DIFFERENT K VALUES
vec_k  = 2:10
vec_CH = rep(0, length(vec_k))
for (i in 1:length(vec_CH)){
cl_now = kmeans(X, k=vec_k[i])$cluster
vec_CH[i] = quality.CH(X, cl_now)
}
plot(vec_k, vec_CH, "b")
data(iris)
X   = rbind(matrix(rnorm(10*3), ncol=3),
matrix(rnorm(10*3, mean=-5), ncol=3),
matrix(rnorm(10*3, mean=5), ncol=3))
## CLUSTERING WITH DIFFERENT K VALUES
vec_k  = 2:10
vec_CH = rep(0, length(vec_k))
for (i in 1:length(vec_CH)){
cl_now = kmeans(X, k=vec_k[i])$cluster
vec_CH[i] = quality.CH(X, cl_now)
}
plot(vec_k, vec_CH, "b")
vec_k
cl_now
data(iris)
X   = rbind(matrix(rnorm(10*3), ncol=3),
matrix(rnorm(10*3, mean=-5), ncol=3),
matrix(rnorm(10*3, mean=5), ncol=3))
## CLUSTERING WITH DIFFERENT K VALUES
vec_k  = 2:10
vec_CH = rep(0, length(vec_k))
for (i in 1:length(vec_CH)){
cl_now = kmeans(X, k=vec_k[i])$cluster
vec_CH[i] = quality.CH(X, cl_now)
}
plot(vec_k, vec_CH, "b")
data(iris)
X   = rbind(matrix(rnorm(10*3), ncol=3),
matrix(rnorm(10*3, mean=-5), ncol=3),
matrix(rnorm(10*3, mean=5), ncol=3))
## CLUSTERING WITH DIFFERENT K VALUES
vec_k  = 2:10
vec_CH = rep(0, length(vec_k))
for (i in 1:length(vec_CH)){
cl_now = kmeans(X, k=vec_k[i])$cluster
vec_CH[i] = quality.CH(X, cl_now)
}
plot(vec_k, vec_CH, "b")
library(T4cluster)
data(iris)
X   = rbind(matrix(rnorm(10*3), ncol=3),
matrix(rnorm(10*3, mean=-5), ncol=3),
matrix(rnorm(10*3, mean=5), ncol=3))
## CLUSTERING WITH DIFFERENT K VALUES
vec_k  = 2:10
vec_CH = rep(0, length(vec_k))
for (i in 1:length(vec_CH)){
cl_now = kmeans(X, k=vec_k[i])$cluster
vec_CH[i] = quality.CH(X, cl_now)
}
plot(vec_k, vec_CH, "b")
data(iris)
X   = rbind(matrix(rnorm(10*3), ncol=3),
matrix(rnorm(10*3, mean=-5), ncol=3),
matrix(rnorm(10*3, mean=5), ncol=3))
## CLUSTERING WITH DIFFERENT K VALUES
vec_k  = 2:10
vec_CH = rep(0, length(vec_k))
for (i in 1:length(vec_CH)){
cl_now = kmeans(X, k=vec_k[i])$cluster
vec_CH[i] = quality.CH(X, cl_now)
}
plot(vec_k, vec_CH, "b")
library(T4cluster)
data(iris)
X   = rbind(matrix(rnorm(10*3), ncol=3),
matrix(rnorm(10*3, mean=-5), ncol=3),
matrix(rnorm(10*3, mean=5), ncol=3))
## CLUSTERING WITH DIFFERENT K VALUES
vec_k  = 2:10
vec_CH = rep(0, length(vec_k))
for (i in 1:length(vec_CH)){
cl_now = kmeans(X, k=vec_k[i])$cluster
vec_CH[i] = quality.CH(X, cl_now)
}
plot(vec_k, vec_CH, "b")
library(T4cluster)
# -------------------------------------------------------------
#           clustering validity of 'iris' dataset
# -------------------------------------------------------------
## PREPARE
data(iris)
X   = as.matrix(iris[,1:4])
lab = as.integer(as.factor(iris[,5]))
## CLUSTERING WITH DIFFERENT K VALUES & COMPUTE QUALITY INDICES
vec_k  = 2:10
vec_cl = rep(0, 9)
for (i in 1:length(vec_k)){
cl_now    = T4cluster::kmeans(X, k=vec_k[i])$cluster
vec_cl[i] = quality.CH(X, cl_now)
}
## VISUALIZE
opar <- par(no.readonly=TRUE)
plot(vec_k, vec_cl, type="b", lty=2, xlab="number of clusteres",
ylab="score", main="CH index")
abline(v=3, lwd=2, col="red")
par(opar)
library(T4cluster)
install.packages("pkgdown", dependencies = TRUE)
library(T4cluster)
# -------------------------------------------------------------
#           clustering validity of 'iris' dataset
# -------------------------------------------------------------
## PREPARE
data(iris)
X   = as.matrix(iris[,1:4])
lab = as.integer(as.factor(iris[,5]))
## CLUSTERING WITH DIFFERENT K VALUES & COMPUTE QUALITY INDICES
vec_k  = 2:10
vec_cl = rep(0, 9)
for (i in 1:length(vec_k)){
cl_now    = T4cluster::kmeans(X, k=vec_k[i])$cluster
vec_cl[i] = quality.sil(X, cl_now)
}
## VISUALIZE
opar <- par(no.readonly=TRUE)
plot(vec_k, vec_cl, type="b", lty=2, xlab="number of clusteres",
ylab="score", main="Silhouette index")
abline(v=3, lwd=2, col="red")
par(opar)
# -------------------------------------------------------------
#           clustering validity of 'iris' dataset
# -------------------------------------------------------------
## PREPARE
data(iris)
X   = as.matrix(iris[,1:4])
lab = as.integer(as.factor(iris[,5]))
## CLUSTERING WITH DIFFERENT K VALUES & COMPUTE QUALITY INDICES
vec_k  = 2:10
vec_cl = rep(0, 9)
for (i in 1:length(vec_k)){
cl_now    = T4cluster::kmeans(X, k=vec_k[i])$cluster
vec_cl[i] = quality.sil(X, cl_now)
}
## VISUALIZE
opar <- par(no.readonly=TRUE)
plot(vec_k, vec_cl, type="b", lty=2, xlab="number of clusteres",
ylab="score", main="Silhouette index")
abline(v=3, lwd=2, col="red")
par(opar)
# -------------------------------------------------------------
#           clustering validity of 'iris' dataset
# -------------------------------------------------------------
## PREPARE
data(iris)
X   = as.matrix(iris[,1:4])
lab = as.integer(as.factor(iris[,5]))
## CLUSTERING WITH DIFFERENT K VALUES & COMPUTE QUALITY INDICES
vec_k  = 2:10
vec_cl = rep(0, 9)
for (i in 1:length(vec_k)){
cl_now    = T4cluster::kmeans(X, k=vec_k[i])$cluster
vec_cl[i] = quality.sil(X, cl_now)
}
## VISUALIZE
opar <- par(no.readonly=TRUE)
plot(vec_k, vec_cl, type="b", lty=2, xlab="number of clusteres",
ylab="score", main="Silhouette index")
abline(v=3, lwd=2, col="red")
par(opar)
# -------------------------------------------------------------
#           clustering validity of 'iris' dataset
# -------------------------------------------------------------
## PREPARE
data(iris)
X   = as.matrix(iris[,1:4])
lab = as.integer(as.factor(iris[,5]))
## CLUSTERING WITH DIFFERENT K VALUES & COMPUTE QUALITY INDICES
vec_k  = 2:10
vec_cl = rep(0, 9)
for (i in 1:length(vec_k)){
cl_now    = T4cluster::kmeans(X, k=vec_k[i])$cluster
vec_cl[i] = quality.sil(X, cl_now)
}
## VISUALIZE
opar <- par(no.readonly=TRUE)
plot(vec_k, vec_cl, type="b", lty=2, xlab="number of clusteres",
ylab="score", main="Silhouette index")
abline(v=3, lwd=2, col="red")
par(opar)
# -------------------------------------------------------------
#           clustering validity of 'iris' dataset
# -------------------------------------------------------------
## PREPARE
data(iris)
X   = as.matrix(iris[,1:4])
lab = as.integer(as.factor(iris[,5]))
## CLUSTERING WITH DIFFERENT K VALUES & COMPUTE QUALITY INDICES
vec_k  = 2:10
vec_cl = rep(0, 9)
for (i in 1:length(vec_k)){
cl_now    = T4cluster::kmeans(X, k=vec_k[i])$cluster
vec_cl[i] = quality.sil(X, cl_now)
}
## VISUALIZE
opar <- par(no.readonly=TRUE)
plot(vec_k, vec_cl, type="b", lty=2, xlab="number of clusteres",
ylab="score", main="Silhouette index")
abline(v=3, lwd=2, col="red")
par(opar)
# -------------------------------------------------------------
#           clustering validity of 3 Gaussians
# -------------------------------------------------------------
## PREPARE
X1 = matrix(rnorm(30*3, mean=-3), ncol=3)
X2 = matrix(rnorm(30*3), ncol=3)
X3 = matrix(rnorm(30*3, mean=3), ncol=3)
XX = rbind(X1, X2, X3)
## CLUSTERING WITH DIFFERENT K VALUES & COMPUTE QUALITY INDICES
vec_k  = 2:10
vec_cl = rep(0, 9)
for (i in 1:length(vec_k)){
cl_now    = T4cluster::kmeans(XX, k=vec_k[i])$cluster
vec_cl[i] = quality.sil(X, cl_now)
}
## VISUALIZE
opar <- par(no.readonly=TRUE)
plot(vec_k, vec_cl, type="b", lty=2, xlab="number of clusteres",
ylab="score", main="Silhouette index")
abline(v=3, lwd=2, col="red")
par(opar)
zz = dist(XX)
class(zz)
# -------------------------------------------------------------
#           clustering validity of 3 Gaussians
# -------------------------------------------------------------
## PREPARE
X1 = matrix(rnorm(30*3, mean=-3), ncol=3)
X2 = matrix(rnorm(30*3), ncol=3)
X3 = matrix(rnorm(30*3, mean=3), ncol=3)
XX = rbind(X1, X2, X3)
## CLUSTERING WITH DIFFERENT K VALUES & COMPUTE QUALITY INDICES
vec_k  = 2:10
vec_cl = rep(0, 9)
for (i in 1:length(vec_k)){
cl_now    = T4cluster::kmeans(XX, k=vec_k[i])$cluster
vec_cl[i] = quality.sil(XX, cl_now)
}
## VISUALIZE
opar <- par(no.readonly=TRUE)
plot(vec_k, vec_cl, type="b", lty=2, xlab="number of clusteres",
ylab="score", main="Silhouette index")
abline(v=3, lwd=2, col="red")
par(opar)
library(T4cluster)
# -------------------------------------------------------------
#        clustering validity check with 3 Gaussians
# -------------------------------------------------------------
## PREPARE
X1 = matrix(rnorm(30*3, mean=-3), ncol=3)
X2 = matrix(rnorm(30*3), ncol=3)
X3 = matrix(rnorm(30*3, mean=3), ncol=3)
XX = rbind(X1, X2, X3)
## CLUSTERING WITH DIFFERENT K VALUES & COMPUTE QUALITY INDICES
vec_k  = 2:10
vec_cl = rep(0, 9)
for (i in 1:length(vec_k)){
cl_now    = T4cluster::kmeans(XX, k=vec_k[i])$cluster
vec_cl[i] = quality.CH(XX, cl_now)
}
## VISUALIZE
opar <- par(no.readonly=TRUE)
plot(vec_k, vec_cl, type="b", lty=2, xlab="number of clusteres",
ylab="score", main="CH index")
abline(v=3, lwd=2, col="red")
par(opar)
# -------------------------------------------------------------
#        clustering validity check with 3 Gaussians
# -------------------------------------------------------------
## PREPARE
X1 = matrix(rnorm(30*3, mean=-3), ncol=3)
X2 = matrix(rnorm(30*3), ncol=3)
X3 = matrix(rnorm(30*3, mean=3), ncol=3)
XX = rbind(X1, X2, X3)
## CLUSTERING WITH DIFFERENT K VALUES & COMPUTE QUALITY INDICES
vec_k  = 2:10
vec_cl = rep(0, 9)
for (i in 1:length(vec_k)){
cl_now    = T4cluster::kmeans(XX, k=vec_k[i])$cluster
vec_cl[i] = quality.CH(XX, cl_now)
}
## VISUALIZE
opar <- par(no.readonly=TRUE)
plot(vec_k, vec_cl, type="b", lty=2, xlab="number of clusteres",
ylab="score", main="CH index")
abline(v=3, lwd=2, col="red")
par(opar)
# -------------------------------------------------------------
#        clustering validity check with 3 Gaussians
# -------------------------------------------------------------
## PREPARE
X1 = matrix(rnorm(30*3, mean=-3), ncol=3)
X2 = matrix(rnorm(30*3), ncol=3)
X3 = matrix(rnorm(30*3, mean=3), ncol=3)
XX = rbind(X1, X2, X3)
## CLUSTERING WITH DIFFERENT K VALUES & COMPUTE QUALITY INDICES
vec_k  = 2:10
vec_cl = rep(0, 9)
for (i in 1:length(vec_k)){
cl_now    = T4cluster::kmeans(XX, k=vec_k[i])$cluster
vec_cl[i] = quality.CH(XX, cl_now)
}
## VISUALIZE
opar <- par(no.readonly=TRUE)
plot(vec_k, vec_cl, type="b", lty=2, xlab="number of clusteres",
ylab="score", main="CH index")
abline(v=3, lwd=2, col="red")
par(opar)
# -------------------------------------------------------------
#        clustering validity check with 3 Gaussians
# -------------------------------------------------------------
## PREPARE
X1 = matrix(rnorm(30*3, mean=-9), ncol=3)
X2 = matrix(rnorm(30*3), ncol=3)
X3 = matrix(rnorm(30*3, mean=9), ncol=3)
XX = rbind(X1, X2, X3)
## CLUSTERING WITH DIFFERENT K VALUES & COMPUTE QUALITY INDICES
vec_k  = 2:10
vec_cl = rep(0, 9)
for (i in 1:length(vec_k)){
cl_now    = T4cluster::kmeans(XX, k=vec_k[i])$cluster
vec_cl[i] = quality.sil(XX, cl_now)
}
## VISUALIZE
opar <- par(no.readonly=TRUE)
plot(vec_k, vec_cl, type="b", lty=2, xlab="number of clusteres",
ylab="score", main="Silhouette index")
abline(v=3, lwd=2, col="red")
par(opar)
# -------------------------------------------------------------
#        clustering validity check with 3 Gaussians
# -------------------------------------------------------------
## PREPARE
X1 = matrix(rnorm(30*3, mean=-9), ncol=3)
X2 = matrix(rnorm(30*3), ncol=3)
X3 = matrix(rnorm(30*3, mean=9), ncol=3)
XX = rbind(X1, X2, X3)
## CLUSTERING WITH DIFFERENT K VALUES & COMPUTE QUALITY INDICES
vec_k  = 2:10
vec_cl = rep(0, 9)
for (i in 1:length(vec_k)){
cl_now    = T4cluster::kmeans(XX, k=vec_k[i])$cluster
vec_cl[i] = quality.sil(XX, cl_now)
}
## VISUALIZE
opar <- par(no.readonly=TRUE)
plot(vec_k, vec_cl, type="b", lty=2, xlab="number of clusteres",
ylab="score", main="Silhouette index")
abline(v=3, lwd=2, col="red")
par(opar)
# -------------------------------------------------------------
#        clustering validity check with 3 Gaussians
# -------------------------------------------------------------
## PREPARE
X1 = matrix(rnorm(30*3, mean=-5), ncol=3)
X2 = matrix(rnorm(30*3), ncol=3)
X3 = matrix(rnorm(30*3, mean=5), ncol=3)
XX = rbind(X1, X2, X3)
## CLUSTERING WITH DIFFERENT K VALUES & COMPUTE QUALITY INDICES
vec_k  = 2:10
vec_cl = rep(0, 9)
for (i in 1:length(vec_k)){
cl_now    = T4cluster::kmeans(XX, k=vec_k[i])$cluster
vec_cl[i] = quality.CH(XX, cl_now)
}
## VISUALIZE
opar <- par(no.readonly=TRUE)
plot(vec_k, vec_cl, type="b", lty=2, xlab="number of clusteres",
ylab="score", main="CH index")
abline(v=3, lwd=2, col="red")
par(opar)
library(T4cluster)
library(RANN)
help(nn2)
x = iris[,1:4]
nn2(x, k=3)
alpha = 0
seq(from=0.01, to=0.1, by=0.07)
abstol=10^{-4}
abstol
1e-4
rm(list=ls())
library(T4cluster)
help(nn2)
nearest = nn2(XX, k=3)
nearest = nn2(iris[,1:4], k=3)
nearest
help(median)
median(1:44)
A = matrix(rnorm(3*2), ncol=2)
max(A)
help(seq)
seq(from=1, to=5, by=7)
library(T4cluster)
library(T4cluster)

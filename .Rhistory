## run MSM algorithm with k=2, 3, and 4
maxiter = 500
output2 = msm(data, k=2, iter=maxiter)
output3 = msm(data, k=3, iter=maxiter)
output4 = msm(data, k=4, iter=maxiter)
## extract final clustering information
nrec  = length(output2)
finc2 = output2[[nrec]]$cluster
finc3 = output3[[nrec]]$cluster
finc4 = output4[[nrec]]$cluster
## visualize
opar <- par(mfrow=c(3,4))
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc2+1,main="K=2:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc3+1,main="K=3:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc4+1,main="K=4:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(2,3)")
par(opar)
## generate a toy example
set.seed(10)
tester = genLP(n=100, nl=2, np=1, iso.var=0.1)
data   = tester$data
label  = tester$class
## do PCA for data reduction
proj = base::eigen(stats::cov(data))$vectors[,1:2]
dat2 = data%*%proj
## run MSM algorithm with k=2, 3, and 4
maxiter = 500
output2 = msm(data, k=2, iter=maxiter)
output3 = msm(data, k=3, iter=maxiter)
output4 = msm(data, k=4, iter=maxiter)
## extract final clustering information
nrec  = length(output2)
finc2 = output2[[nrec]]$cluster
finc3 = output3[[nrec]]$cluster
finc4 = output4[[nrec]]$cluster
## visualize
opar <- par(mfrow=c(3,4))
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc2+1,main="K=2:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc3+1,main="K=3:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc4+1,main="K=4:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(2,3)")
par(opar)
## generate a toy example
set.seed(10)
tester = genLP(n=100, nl=2, np=1, iso.var=0.1)
data   = tester$data
label  = tester$class
## do PCA for data reduction
proj = base::eigen(stats::cov(data))$vectors[,1:2]
dat2 = data%*%proj
## run MSM algorithm with k=2, 3, and 4
maxiter = 500
output2 = msm(data, k=2, iter=maxiter)
output3 = msm(data, k=3, iter=maxiter)
output4 = msm(data, k=4, iter=maxiter)
## extract final clustering information
nrec  = length(output2)
finc2 = output2[[nrec]]$cluster
finc3 = output3[[nrec]]$cluster
finc4 = output4[[nrec]]$cluster
## visualize
opar <- par(mfrow=c(3,4))
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc2+1,main="K=2:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc3+1,main="K=3:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc4+1,main="K=4:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(2,3)")
par(opar)
output2[[length(output2)]]
PP = output2[[length(output2)]]$P
PP
P1 = PP[[1]]
t(PP)%*%PP
t(P1)%*%P1
Matrix::rankMatrix(P1)
Matrix::rankMatrix(P2)
Matrix::rankMatrix(PP[[2]])
Matrix::rankMatrix(PP[[3]])
PP
library(T4cluster)
library(T4cluster)
pkgdown::build_site()
library(T4cluster)
library(T4cluster)
install.packages("mlbench")
library(T4cluster)
vector("list",5)
matrix(0,nrow=K,ncol=n)
matrix(0,nrow=3,ncol=2)
array(0,c(3,2))
library(T4cluster)
library(T4cluster)
library(T4cluster)
methods(msm)
methods("predit")
methods("predict")
xx= list(1)
xx
library(T4cluster)
help(predict.msm)
output2
testmsm = output2[[1]]
testmsm
predict.msm(data, testmsm)
testmsm = structure(output2[[1]], class="msm")
predict.msm(data, testmsm)
predict(data, testmsm)
class(testmsm)
rm(list=ls())
library(T4cluster)
set.seed(10)
tester = genLP(n=100, nl=2, np=1, iso.var=0.1)
data   = tester$data
label  = tester$class
## do PCA for data reduction
proj = base::eigen(stats::cov(data))$vectors[,1:2]
dat2 = data%*%proj
## run MSM algorithm with k=2, 3, and 4
maxiter = 500
output2 = msm(data, k=2, iter=maxiter)
iter1 = output2[[1]]
class(iter12)
class(iter1)
label_pred = predict(data, iter1)
library(T4cluster)
label_pred = predict(iter1, data)
label_pred
label_mcmc = iter1$cluster
label_pred - label_mcmc
pkgdown::build_site()
library(T4cluster)
x = 1:1000
y = seq(from=1, to=10000, by=10)
y2 = seq(from=1, to=10000, by=1000)
length(y)
length(y2)
install.packages("ADMM")
ADMM::admm.bp()
library(ADMM)
help(admm.bp)
library(T4cluster)
help("admm.bp")
library(T4cluster)
X = as.matrix(iris[,1:4])
k=2
N = base::nrow(X)
K = max(1, round(k))
# Step 1. Solve Multiple ADMM Program
C = array(0,c(N,N))
for (n in 1:N){
C[,n] = as.vector(ssc_single_bp(X, n))
}
# Step 2. Normalize the Columns of C
for (n in 1:N){
tgtvec = C[,n]
C[,n]  = tgtvec/base::max(base::abs(tgtvec))
}
# Step 3. Construct Similarity Graph
W = base::abs(C) + t(base::abs(C))
max(W)
image(W)
diag(W)
# Step 3. Construct Similarity Graph
W = (base::abs(C) + t(base::abs(C)))/2
range(as.vector(W))
diag(W)
max(W)
W[1:5,1:5]
rm(list=ls())
library(T4cluster)
output2 = ssc(data, k=2)
data   = tester$data
set.seed(10)
tester = genLP(n=100, nl=2, np=1, iso.var=0.1)
data   = tester$data
label  = tester$class
## do PCA for data reduction
proj = base::eigen(stats::cov(data))$vectors[,1:2]
dat2 = data%*%proj
## run SSC algorithm with k=2, 3, and 4
output2 = ssc(data, k=2)
output3 = ssc(data, k=3)
output4 = ssc(data, k=4)
help(ad"admm.bp")
help(admm.bp)
output2$cluster
## visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(3,4))
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=lab2,main="K=2:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=lab2,main="K=2:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=lab2,main="K=2:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=lab2,main="K=2:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=lab3,main="K=3:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=lab3,main="K=3:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=lab3,main="K=3:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=lab3,main="K=3:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=lab4,main="K=4:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=lab4,main="K=4:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=lab4,main="K=4:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=lab4,main="K=4:Axis(2,3)")
par(opar)
## extract label information
lab2 = output2$cluster
lab3 = output3$cluster
lab4 = output4$cluster
## visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(3,4))
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=lab2,main="K=2:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=lab2,main="K=2:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=lab2,main="K=2:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=lab2,main="K=2:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=lab3,main="K=3:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=lab3,main="K=3:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=lab3,main="K=3:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=lab3,main="K=3:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=lab4,main="K=4:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=lab4,main="K=4:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=lab4,main="K=4:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=lab4,main="K=4:Axis(2,3)")
par(opar)
plot(output2$embeds)
plot(output3$embeds)
plot(output4$embeds)
data
X = data
K=2
N = base::nrow(X)
K = max(1, round(k))
# Step 1. Solve Multiple ADMM Program
C = array(0,c(N,N))
for (n in 1:N){
C[,n] = as.vector(ssc_single_bp(X, n))
}
k=2
K = max(1, round(k))
# Step 2. Normalize the Columns of C
for (n in 1:N){
tgtvec = C[,n]
C[,n]  = tgtvec/base::max(base::abs(tgtvec))
}
# Step 1. Solve Multiple ADMM Program
C = array(0,c(N,N))
for (n in 1:N){
C[,n] = as.vector(ssc_single_bp(X, n))
}
# Step 2. Normalize the Columns of C
for (n in 1:N){
tgtvec = C[,n]
C[,n]  = tgtvec/base::max(base::abs(tgtvec))
}
# Step 3. Construct Similarity Graph
W = (base::abs(C) + t(base::abs(C)))/2
image(W)
W
min(W)
max(W)
rm(list=ls())
library(T4cluster)
## generate a toy example
set.seed(10)
tester = genLP(n=100, nl=2, np=1, iso.var=0.1)
data   = tester$data
label  = tester$class
## do PCA for data reduction
proj = base::eigen(stats::cov(data))$vectors[,1:2]
dat2 = data%*%proj
## run SSC algorithm with k=2, 3, and 4
output2 = ssc(data, k=2)
output3 = ssc(data, k=3)
output4 = ssc(data, k=4)
## extract label information
lab2 = output2$cluster
lab3 = output3$cluster
lab4 = output4$cluster
## visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(3,4))
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=lab2,main="K=2:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=lab2,main="K=2:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=lab2,main="K=2:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=lab2,main="K=2:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=lab3,main="K=3:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=lab3,main="K=3:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=lab3,main="K=3:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=lab3,main="K=3:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=lab4,main="K=4:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=lab4,main="K=4:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=lab4,main="K=4:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=lab4,main="K=4:Axis(2,3)")
par(opar)
library(T4cluster)
output2$eigval
help(ssc)
rm(list=ls())
library(T4cluster)
help("ssc")
pkgdown::build_site()
library(T4cluster)
## generate a toy example
set.seed(10)
tester = genLP(n=100, nl=2, np=1, iso.var=0.1)
data   = tester$data
label  = tester$class
## do PCA for data reduction
proj = base::eigen(stats::cov(data))$vectors[,1:2]
dat2 = data%*%proj
## run EKSS algorithm with k=2,3,4 with EKSS-0 and 5 iteration
out2zero = EKSS(data, k=2, iter=0)
library(T4cluster)
set.seed(10)
tester = genLP(n=100, nl=2, np=1, iso.var=0.1)
data   = tester$data
label  = tester$class
## do PCA for data reduction
proj = base::eigen(stats::cov(data))$vectors[,1:2]
dat2 = data%*%proj
## run EKSS algorithm with k=2,3,4 with EKSS-0 and 5 iteration
out2zero = EKSS(data, k=2)
out3zero = EKSS(data, k=3)
out4zero = EKSS(data, k=4)
library(T4cluster)
set.seed(10)
tester = genLP(n=100, nl=2, np=1, iso.var=0.1)
data   = tester$data
label  = tester$class
## do PCA for data reduction
proj = base::eigen(stats::cov(data))$vectors[,1:2]
dat2 = data%*%proj
## run EKSS algorithm with k=2,3,4 with EKSS-0 and 5 iteration
out2zero = EKSS(data, k=2)
out3zero = EKSS(data, k=3)
out4zero = EKSS(data, k=4)
## generate a toy example
set.seed(10)
tester = genLP(n=100, nl=2, np=1, iso.var=0.1)
data   = tester$data
label  = tester$class
## do PCA for data reduction
proj = base::eigen(stats::cov(data))$vectors[,1:2]
dat2 = data%*%proj
## run EKSS algorithm with k=2,3,4 with EKSS-0 and 5 iteration
out2zero = EKSS(data, k=2)
out3zero = EKSS(data, k=3)
out4zero = EKSS(data, k=4)
out2iter = EKSS(data, k=2, iter=5)
out3iter = EKSS(data, k=3, iter=5)
out4iter = EKSS(data, k=4, iter=5)
## extract label information
lab2zero = out2zero$cluster
lab3zero = out3zero$cluster
lab4zero = out4zero$cluster
lab2iter = out2iter$cluster
lab3iter = out3iter$cluster
lab4iter = out4iter$cluster
## visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,3))
plot(dat2, pch=19, cex=0.9, col=lab2zero, main="LRSC Relaxed:K=2")
plot(dat2, pch=19, cex=0.9, col=lab3zero, main="LRSC Relaxed:K=3")
plot(dat2, pch=19, cex=0.9, col=lab4zero, main="LRSC Relaxed:K=4")
plot(dat2, pch=19, cex=0.9, col=lab2iter, main="LRSC Exact:K=2")
plot(dat2, pch=19, cex=0.9, col=lab3iter, main="LRSC Exact:K=3")
plot(dat2, pch=19, cex=0.9, col=lab4iter, main="LRSC Exact:K=4")
par(opar)
library(T4cluster)
out2iter = EKSS(data, k=2, iter=5)
out3iter = EKSS(data, k=3, iter=5)
out4iter = EKSS(data, k=4, iter=5)
## extract label information
lab2zero = out2zero$cluster
lab3zero = out3zero$cluster
lab4zero = out4zero$cluster
lab2iter = out2iter$cluster
lab3iter = out3iter$cluster
lab4iter = out4iter$cluster
## visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,3))
plot(dat2, pch=19, cex=0.9, col=lab2zero, main="LRSC Relaxed:K=2")
plot(dat2, pch=19, cex=0.9, col=lab3zero, main="LRSC Relaxed:K=3")
plot(dat2, pch=19, cex=0.9, col=lab4zero, main="LRSC Relaxed:K=4")
plot(dat2, pch=19, cex=0.9, col=lab2iter, main="LRSC Exact:K=2")
plot(dat2, pch=19, cex=0.9, col=lab3iter, main="LRSC Exact:K=3")
plot(dat2, pch=19, cex=0.9, col=lab4iter, main="LRSC Exact:K=4")
par(opar)
library(T4cluster)
## run EKSS algorithm with k=2,3,4 with EKSS-0 and 5 iteration
out2zero = EKSS(data, k=2)
out3zero = EKSS(data, k=3)
out4zero = EKSS(data, k=4)
out2iter = EKSS(data, k=2, iter=10)
out3iter = EKSS(data, k=3, iter=10)
out4iter = EKSS(data, k=4, iter=10)
## extract label information
lab2zero = out2zero$cluster
lab3zero = out3zero$cluster
lab4zero = out4zero$cluster
lab2iter = out2iter$cluster
lab3iter = out3iter$cluster
lab4iter = out4iter$cluster
## visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,3))
plot(dat2, pch=19, cex=0.9, col=lab2zero, main="LRSC Relaxed:K=2")
plot(dat2, pch=19, cex=0.9, col=lab3zero, main="LRSC Relaxed:K=3")
plot(dat2, pch=19, cex=0.9, col=lab4zero, main="LRSC Relaxed:K=4")
plot(dat2, pch=19, cex=0.9, col=lab2iter, main="LRSC Exact:K=2")
plot(dat2, pch=19, cex=0.9, col=lab3iter, main="LRSC Exact:K=3")
plot(dat2, pch=19, cex=0.9, col=lab4iter, main="LRSC Exact:K=4")
par(opar)
library(T4cluster)
library(T4cluster)
library(T4cluster)
library(T4cluster)
## generate a toy example
set.seed(10)
tester = genLP(n=100, nl=2, np=1, iso.var=0.1)
data   = tester$data
label  = tester$class
## do PCA for data reduction
proj = base::eigen(stats::cov(data))$vectors[,1:2]
dat2 = data%*%proj
## run MSM algorithm with k=2, 3, and 4
maxiter = 500
output2 = MSM(data, k=2, iter=maxiter)
output3 = MSM(data, k=3, iter=maxiter)
output4 = MSM(data, k=4, iter=maxiter)
## extract final clustering information
nrec  = length(output2)
finc2 = output2[[nrec]]$cluster
finc3 = output3[[nrec]]$cluster
finc4 = output4[[nrec]]$cluster
## visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(3,4))
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc2+1,main="K=2:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc3+1,main="K=3:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc4+1,main="K=4:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(2,3)")
par(opar)
pkgdown::build_site()
## generate a toy example
set.seed(10)
tester = genLP(n=100, nl=2, np=1, iso.var=0.1)
data   = tester$data
label  = tester$class
## do PCA for data reduction
proj = base::eigen(stats::cov(data))$vectors[,1:2]
dat2 = data%*%proj
## run MSM algorithm with k=2, 3, and 4
maxiter = 500
output2 = MSM(data, k=2, iter=maxiter)
output3 = MSM(data, k=3, iter=maxiter)
sum(diag(output2[[1]]$P[[1]]))
sum(diag(output2[[1]]$P[[2]]))
sum(diag(output2[[1]]$P[[3]]))
sum(diag(output3[[1]]$P[[1]]))
sum(diag(output3[[1]]$P[[2]]))
sum(diag(output3[[1]]$P[[3]]))
niter = length(output3)
for (i in 1:niter){
n1 = output3[[i]]$P[[1]]
n2 = output3[[i]]$P[[2]]
n3 = output3[[i]]$P[[3]]
print(paste0("iter ",i,": (",n1,",",n2,",",n3,")"))
}
for (i in 1:niter){
n1 = sum(diag(output3[[i]]$P[[1]]))
n2 = sum(diag(output3[[i]]$P[[2]]))
n3 = sum(diag(output3[[i]]$P[[3]]))
print(paste0("iter ",i,": (",n1,",",n2,",",n3,")"))
}
rm(list=ls())
library(T4cluster)
pkgdown::build_home()
pkgdown::build_site()
library(T4cluster)
library(T4cluster)
library(T4cluster)
